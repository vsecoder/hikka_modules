"""
                              _
__   _____  ___  ___ ___   __| | ___ _ __
\ \ / / __|/ _ \/ __/ _ \ / _` |/ _ \ '__|
 \ V /\__ \  __/ (_| (_) | (_| |  __/ |
  \_/ |___/\___|\___\___/ \__,_|\___|_|

  Copyleft 2022 t.me/vsecoder
  This program is free software; you can redistribute it and/or modify

"""
# meta developer: @vsecoder_m

version = (1, 0, 0)

from telethon import functions
from telethon.tl.types import Message
import asyncio
import logging

from .. import loader, utils  # type: ignore

logger = logging.getLogger(__name__)


@loader.tds
class ChatGPTfreeMod(loader.Module):
    """
    –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è ChatGPT
    https://t.me/Jarvis_IT_Assistant_bot
    –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """

    strings = {
        "name": "ChatGPTfree",
        "loading": "üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...",
        "no_args": "üö´ –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!",
        "start_text": "<b>ü§ñ ChatGPT:</b>\n",
        "context_text": "‚ùï –°–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã.",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.gpt_free = "@Jarvis_IT_Assistant_bot"

    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
        ignore_answer: bool = False,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(user_id) as conv:
            msg = await conv.send_message(text)
            while True:
                await asyncio.sleep(1)
                response = await conv.get_response()
                if mark_read:
                    await conv.mark_read()

                if delete:
                    await msg.delete()
                    await response.delete()

                if ignore_answer:
                    return response

                if "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" in response.text:
                    continue

                if "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞" in response.text:
                    continue

                return response

    async def chatgptfreecmd(self, message: Message):
        """
        {text} - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT
        """
        args = utils.get_args_raw(message)

        if not args:
            return await utils.answer(message, self.strings["no_args"])

        await utils.answer(message, self.strings["loading"])

        response = await self.message_q(
            args, self.gpt_free, mark_read=True, delete=True, ignore_answer=False
        )

        text = self.strings["start_text"] + response.text.replace(
            "/context", "<code>.contextgpt</code>"
        )

        return await utils.answer(message, text)

    async def contextgptcmd(self, message: Message):
        """
        - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π
        """
        await self.message_q(
            "/context", self.gpt_free, mark_read=True, delete=True, ignore_answer=True
        )
        return await utils.answer(message, self.strings["context_text"])
